# This file contains a configuration for the Anycubic Kobra Plus printer.
#
# The Kobra Max mainboard must be modified to correct conflicting UART
# addresses. As delivered, the X stepper and E0 stepper use UART address 0.
# To correct, move resistor R65 to R66. This moves the X stepper to address 3.
#
# After making this modification, any future firmwares will need to use the new
# address for the X stepper. To revert to the stock firmware, either undo the
# modification, or recompile the stock firmware using the correct addresses for
# X_SLAVE_ADDRESS and E0_SLAVE_ADDRESS.
#
# See docs/Config_Reference.md for a description of parameters.
#
# To build the firmware, use the following configuration:
#   - Micro-controller: Huada Semiconductor HC32F460
#   - Communication interface: Serial (PA3 & PA2) - Anycube
#
# Installation:
#  1. Rename the klipper bin to `firmware.bin` and copy it to an SD Card.
#  2. Power off the Printer, insert the SD Card and power it on.
#  3. The printer should beep several times and the LCD will be stuck on the
#     Splash screen.

[include mainsail.cfg]
[include timelapse.cfg]

[delayed_gcode bed_mesh_init]
initial_duration: .01
gcode:
  BED_MESH_PROFILE LOAD=default

[exclude_object]

[respond]

[stepper_x]
step_pin: PA5
dir_pin: PA4
enable_pin: !PC3
microsteps: 16
rotation_distance: 40
endstop_pin: !PA6
position_min: -6.2
position_endstop: -6.2
position_max: 404
homing_speed: 100

[tmc2209 stepper_x]
uart_pin:PA15
tx_pin:PA9
#diag_pin:PA6
sense_resistor: 0.100
run_current: 0.9
uart_address: 3
#driver_SGTHRS: 0
stealthchop_threshold: 999999

[stepper_y]
step_pin: PC4
dir_pin: PA7
enable_pin: !PC3
microsteps: 16
rotation_distance: 40
endstop_pin: !PC5
position_min: -20.5
position_endstop: -20.5
position_max: 404
homing_speed: 100

[tmc2209 stepper_y]
uart_pin:PA15
tx_pin:PA9
#diag_pin:^PC5
sense_resistor: 0.100
run_current: 0.9
uart_address: 1
#driver_SGTHRS: 50
stealthchop_threshold: 999999

[stepper_z]
step_pin: PC7
dir_pin: !PC6
enable_pin: !PC3
microsteps: 16
rotation_distance: 8
endstop_pin: probe:z_virtual_endstop
#endstop_pin: PA8
#position_endstop: 0
position_min: -10
position_max: 450
homing_speed: 10

[tmc2209 stepper_z]
uart_pin:PA15
tx_pin:PA9
#diag_pin:PA8
sense_resistor: 0.100
run_current: 0.9
uart_address: 2
#driver_SGTHRS: 0
stealthchop_threshold: 999999

[stepper_z1]
step_pin: PB1
dir_pin: !PB0
enable_pin: !PC3
microsteps: 16
rotation_distance: 8


[probe]
pin: !PB6
speed: 5.0
samples: 2
samples_tolerance_retries: 3
z_offset: 0.05
activate_gcode: probe_reset

[output_pin LED]
pin: mcu:PB8
pwm: False
value: 0

[output_pin probe_reset_pin]
pin: !PB7

[extruder]
max_extrude_only_distance: 100.0
step_pin: PC14
dir_pin: !PC15
enable_pin: !PC3
microsteps: 16
#rotation_distance: 7.71 #For stock extruder (To be calibrated !)
rotation_distance: 7.71 #For Micro Swiss extruder
nozzle_diameter: 0.400
filament_diameter: 1.750
heater_pin: PA1
sensor_type: EPCOS 100K B57560G104F
sensor_pin: PC1
control = pid
pid_kp = 31.243
pid_ki = 3.414
pid_kd = 71.468
min_temp: 0
max_temp: 250

[firmware_retraction]
retract_length:2 #stock is more than 2
retract_speed:20
unretract_extra_length:0
unretract_speed:20

[tmc2208 extruder]
uart_pin:PA15
tx_pin:PA9
#diag_pin:PB7
sense_resistor: 0.100
run_current: 0.9
uart_address: 0
stealthchop_threshold: 999999


[heater_bed]
heater_pin: PA0
sensor_type: EPCOS 100K B57560G104F
sensor_pin: PC0
control = pid
pid_kp = 73.966
pid_ki = 0.884
pid_kd = 1547.747
min_temp: 0
max_temp: 130

#[temperature_fan Mainboard]
#pin: mcu:PA13
#sensor_type: temperature_mcu
#max_power: 1.0
#shutdown_speed: 1.0
#hardware_pwm: false
#kick_start_time: 0.5
#off_below: 0.4
#max_temp: 100
#min_temp: 20
#target_temp: 50
#max_speed: 1.0
#min_speed: 0.3
#control: pid
#pid_Kp: 1
#pid_Ki: 1
#pid_Kd: 1

[fan]
pin: PB9

[heater_fan hotend_fan]
pin: PA13
heater: extruder
heater_temp: 50.0

[heater_fan controller_fan]
pin: PA14
heater: heater_bed
heater_temp: 45.0

[safe_z_home]
home_xy_position: 200, 200 # Center of bed
speed: 100
z_hop: 5               # Move up 5mm
z_hop_speed: 15
move_to_previous: True
 
[bed_mesh]
speed: 100
horizontal_move_z: 5
mesh_min: 19, 19
mesh_max: 380, 380
algorithm: bicubic
probe_count: 7, 7

[gcode_macro probe_reset]
gcode:
    SET_PIN PIN=probe_reset_pin VALUE=1
    G4 P500
    SET_PIN PIN=probe_reset_pin VALUE=0
    G4 P100

[filament_switch_sensor runout]
pause_on_runout: True
switch_pin: !PC13

[mcu]
serial: /dev/serial/by-id/usb-1a86_USB_Serial-if00-port0
restart_method: command
baud: 250000

[temperature_sensor host]
sensor_type: temperature_host
min_temp: 0
max_temp: 100

[printer]
kinematics: cartesian
max_velocity: 300
max_accel: 2000
max_z_velocity: 5
max_z_accel: 100

[virtual_sdcard]
path: /home/pi/printer_data/gcodes

[display_status]

[pause_resume]

[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
gcode:
    ##### set defaults #####
    {% set x = params.X|default(230) %}      #edit to your park position
    {% set y = params.Y|default(230) %}      #edit to your park position
    {% set z = params.Z|default(10)|float %} #edit to your park position
    {% set e = params.E|default(1) %}        #edit to your retract length
    ##### calculate save lift position #####
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set act_z = printer.toolhead.position.z|float %}
    {% set lift_z = z|abs %}
    {% if act_z < (max_z - lift_z) %}
        {% set z_safe = lift_z %}
    {% else %}
        {% set z_safe = max_z - act_z %}
    {% endif %}
    ##### end of definitions #####
    PAUSE_BASE
    G91
    {% if printer.extruder.can_extrude|lower == 'true' %}
      G1 E-{e} F2100
    {% else %}
      {action_respond_info("Extruder not hot enough")}
    {% endif %}
    {% if "xyz" in printer.toolhead.homed_axes %}    
      G1 Z{z_safe}
      G90
      G1 X{x} Y{y} F6000
    {% else %}
      {action_respond_info("Printer not homed")}
    {% endif %}

[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
    ##### set defaults #####
    {% set e = params.E|default(1) %} #edit to your retract length
    #### get VELOCITY parameter if specified ####
    {% if 'VELOCITY' in params|upper %}
      {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
    {%else %}
      {% set get_params = "" %}
    {% endif %}
    ##### end of definitions #####
    G91
    {% if printer.extruder.can_extrude|lower == 'true' %}
      G1 E{e} F2100
    {% else %}
      {action_respond_info("Extruder not hot enough")}
    {% endif %}  
    RESUME_BASE {get_params}

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
    TURN_OFF_HEATERS
    CANCEL_PRINT_BASE
